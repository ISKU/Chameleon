apply plugin: "org.sonarqube"
apply plugin: 'jacoco'

// set your sonar url server
def sonarUrl = "http://sonarqube.url.com"

sonarqube {
    properties {
        property "sonar.host.url", sonarUrl
    }
}

def jacocoVersion = "0.7.4.201502262128"

// ********************************************************************************************************
// ****************************** modify this maps for your project ***************************************
// ********************************************************************************************************

def projectFlavorMap = ['app' : 'debug']

def projectJacocoReportPath = [ 'app' : 'build/jacoco/testDebugUnitTest.exec']

def projectJunitReportPath = [  'app' : 'build/test-results/debug']

def projectJavaBinaries = [    'app' : 'build/intermediates/classes/debug']

def projectJacocoReportTaskDependsOn = [    'app' : 'testDebugUnitTest']

// ********************************************************************************************************

subprojects { prj ->

    if (projectFlavorMap.containsKey(prj.name)) {
        apply plugin: 'jacoco'
        jacoco {
            version jacocoVersion
        }

        task jacocoReport(type: JacocoReport) {
            group = 'Reporting'
            description = 'Generate Jacoco coverage reports after running tests.'

            reports {
                xml.enabled = true
                html.enabled = true
            }

            classDirectories = fileTree(
                    dir: 'build/intermediates/classes/debug',
                    excludes: [
                            '**/R*.class',
                            '**/BuildConfig*',
                            '**/Lambda$*.class',
                            '**/Lambda.class',
                            '**/*Lambda.class',
                            '**/*Lambda*.class'
                    ]
            )

            sourceDirectories = files('src/main/java')
            executionData = fileTree(dir: project.projectDir, includes: ['**/*.exec', '**/*.ec'])

            doFirst {
                files('build/intermediates/classes/debug').getFiles().each { file ->
                    if (file.name.contains('$$')) {
                        file.renameTo(file.path.replace('$$', '$'))
                    }
                }
            }
        }

        sonarqube {
            properties {
                property "sonar.host.url", sonarUrl
                property "sonar.sources", "src/main"
                if (checkIfFolderExists("src/test")) {
                    property "sonar.tests", "src/test"
                }
                property "sonar.java.coveragePlugin", "jacoco"
                property "sonar.jacoco.reportPath", projectJacocoReportPath.get(prj.name)
                property "sonar.junit.reportsPath", projectJunitReportPath.get(prj.name)
                property "sonar.java.binaries", projectJavaBinaries.get(prj.name)
            }
        }

        jacocoReport.dependsOn projectJacocoReportTaskDependsOn.get(prj.name)
    }
}

def checkIfFolderExists(String folderName) {
    def folder = new File(folderName)
    if (folder.exists()) {
        return true
    } else {
        return false
    }
}

jacoco {
    toolVersion jacocoVersion
}

task jacocoFullReport(type: JacocoReport, group: 'Coverage reports') {
    group = 'Reporting'
    description = 'Generates an aggregate report from all subprojects'

    // Get list of projects which should be included in the report
    def projects = new ArrayList()
    subprojects.each { prj ->
        projects.add(prj)
    }

    dependsOn(projects.jacocoReport)

    additionalSourceDirs = generateSourceFiles(projects)
    sourceDirectories = generateSourceFiles(projects)
    classDirectories = generateClassDirs(projects)
    executionData = files(projects.jacocoReport.executionData)

    reports {
        html {
            enabled true
            destination 'build/reports/jacoco/full'
        }
        xml {
            enabled true
            destination 'build/reports/jacoco/full/jacocoFullReport.xml'
        }
    }

    doFirst {
        //noinspection GroovyAssignabilityCheck
        executionData = files(executionData.findAll { it.exists() })
    }
}

/**
 *  Generate a FileCollection of all projects source files
 */
FileCollection generateSourceFiles(Collection projects) {
    def dirs = []

    projects.each { prj ->
        dirs.add("${prj.name}/src/main/java")
    }

    return files(dirs)
}

/**
 *  Generate a FileCollection of all projects class files
 */
FileCollection generateClassDirs(Collection projects) {
    def tree = fileTree('directory does not exists')

    projects.each { prj ->
        tree += fileTree(
                dir: "${prj.name}/build/intermediates/classes/debug",
                excludes: [
                        '**/R*.class',
                        '**/BuildConfig*',
                        '**/Lambda$*.class',
                        '**/Lambda.class',
                        '**/*Lambda.class',
                        '**/*Lambda*.class'
                ]
        )
    }

    return tree
}

project.tasks.sonarqube.dependsOn 'jacocoFullReport'
